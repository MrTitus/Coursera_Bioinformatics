###Find frequency of all possible patterns of k-char
for (i in 1:(nchar(DNAseq)-k+1)) {
pattern <- substr(DNAseq, i, i+k-1)
PatternCounts[i,1] <- pattern
PatternCounts[i,2] <- patternCount(DNAseq, pattern, i)
if (patternCount(DNAseq, pattern, i) > maxCount) {
maxCount <- patternCount(DNAseq, pattern, i)
}
}
for (i in 1:(nchar(DNAseq)-k+1)) {
if (PatternCounts[i, 2] == maxCount) {
print(PatternCounts[i,1])
}
}
mydata <- readLines("dataset_2_10.txt")
DNAseq <- mydata[2]
k <- strtoi(mydata[3])
PatternCounts <- array(dim = c(nchar(DNAseq)-k+1, 2))
maxCount <- 1
###Find frequency of all possible patterns of k-char
for (i in 1:(nchar(DNAseq)-k+1)) {
pattern <- substr(DNAseq, i, i+k-1)
PatternCounts[i,1] <- pattern
PatternCounts[i,2] <- patternCount(DNAseq, pattern, i)
if (patternCount(DNAseq, pattern, i) > maxCount) {
maxCount <- patternCount(DNAseq, pattern, i)
}
}
for (i in 1:(nchar(DNAseq)-k+1)) {
if (PatternCounts[i, 2] == maxCount) {
print(PatternCounts[i,1])
}
}
mydata <- readLines("dataset_2_10.txt")
DNAseq <- mydata[2]
k <- strtoi(mydata[3])
PatternCounts <- array(dim = c(nchar(DNAseq)-k+1, 2))
maxCount <- 1
###Find frequency of all possible patterns of k-char
for (i in 1:(nchar(DNAseq)-k+1)) {
pattern <- substr(DNAseq, i, i+k-1)
PatternCounts[i,1] <- pattern
PatternCounts[i,2] <- patternCount(DNAseq, pattern, i)
if (patternCount(DNAseq, pattern, i) > maxCount) {
maxCount <- patternCount(DNAseq, pattern, i)
}
}
for (i in 1:(nchar(DNAseq)-k+1)) {
if (PatternCounts[i, 2] == maxCount) {
print(PatternCounts[i,1])
}
}
mydata <- readLines("dataset_2_10.txt")
mydata <- readLines("dataset_2_10.txt")
DNAseq <- mydata[1]
k <- strtoi(mydata[2])
mydata <- readLines("dataset_2_10.txt")
DNAseq <- mydata[1]
k <- strtoi(mydata[2])
PatternCounts <- array(dim = c(nchar(DNAseq)-k+1, 2))
maxCount <- 1
###Find frequency of all possible patterns of k-char
for (i in 1:(nchar(DNAseq)-k+1)) {
pattern <- substr(DNAseq, i, i+k-1)
PatternCounts[i,1] <- pattern
PatternCounts[i,2] <- patternCount(DNAseq, pattern, i)
if (patternCount(DNAseq, pattern, i) > maxCount) {
maxCount <- patternCount(DNAseq, pattern, i)
}
}
for (i in 1:(nchar(DNAseq)-k+1)) {
if (PatternCounts[i, 2] == maxCount) {
print(PatternCounts[i,1])
}
}
mostFrequentPatterns <- function(DNAseq, k) {
PatternCounts <- array(dim = c(nchar(DNAseq)-k+1, 2))
maxCount <- 1
###Find frequency of all possible patterns of k-char
for (i in 1:(nchar(DNAseq)-k+1)) {
pattern <- substr(DNAseq, i, i+k-1)
PatternCounts[i,1] <- pattern
PatternCounts[i,2] <- patternCount(DNAseq, pattern, i)
if (patternCount(DNAseq, pattern, i) > maxCount) {
maxCount <- patternCount(DNAseq, pattern, i)
}
}
for (i in 1:(nchar(DNAseq)-k+1)) {
if (PatternCounts[i, 2] == maxCount) {
print(PatternCounts[i,1])
}
}
}
mostFrequentPatterns(DNAseq, k)
patternCount <- function(text, pattern, start) {
count <- 0
if (missing(start)) {
start <- 1
}
##Loop that counts the how many times a pattern appears in
##a specific DNA string
for (i in start:nchar(text)-nchar(pattern)+1) {
if (substr(text, i, i+nchar(pattern)-1)==pattern) {
count <- count + 1
}
}
return(count)
}
mostFrequentPatterns <- function(DNAseq, k) {
PatternCounts <- array(dim = c(nchar(DNAseq)-k+1, 2))
maxCount <- 1
###Find frequency of all possible patterns of k-char
for (i in 1:(nchar(DNAseq)-k+1)) {
pattern <- substr(DNAseq, i, i+k-1)
PatternCounts[i,1] <- pattern
PatternCounts[i,2] <- patternCount(DNAseq, pattern, i)
if (patternCount(DNAseq, pattern, i) > maxCount) {
maxCount <- patternCount(DNAseq, pattern, i)
}
}
for (i in 1:(nchar(DNAseq)-k+1)) {
if (PatternCounts[i, 2] == maxCount) {
print(PatternCounts[i,1])
}
}
}
substr(DNAseq, nchar(DNAseq), nchar(DNAseq))
DNAseq <- "AAAACCCGGT"
substr(DNAseq, nchar(DNAseq), nchar(DNAseq))
compSeq <- ""
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == A) {
compSeq <- compSeq + "T"
} else if (substr(DNAseq, i, i) == T) {
compSeq <- compSeq + "A"
} else if (substr(DNAseq, i, i) == G) {
compSeq <- compSeq + "C"
} else if (substr(DNAseq, i, i) == C) {
compSeq <- compSeq + "G"
}
}
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- compSeq + "T"
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- compSeq + "A"
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- compSeq + "C"
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- compSeq + "G"
}
}
DNAseq <- "AAAACCCGGT"
substr(DNAseq, nchar(DNAseq), nchar(DNAseq))
compSeq <- ""
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- paste(compSeq, "T")
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- paste(compSeq, "A")
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- paste(compSeq, "C")
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- paste(compSeq, "G")
}
}
DNAseq <- "AAAACCCGGT"
substr(DNAseq, nchar(DNAseq), nchar(DNAseq))
compSeq <- ""
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- paste(compSeq, "T", sep="")
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- paste(compSeq, "A", sep="")
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- paste(compSeq, "C", sep="")
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- paste(compSeq, "G", sep="")
}
}
mydata <- readLines("dna2.txt")
setwd("C:/Users/Brandon/Desktop/Coursera Bioinformatics")
mydata <- readLines("dna2.txt")
mydata <- readLines("dna2.txt")
mydata <- readLines("dna1.txt")
DNAseq <- mydata[2]
compSeq <- ""
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- paste(compSeq, "T", sep="")
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- paste(compSeq, "A", sep="")
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- paste(compSeq, "C", sep="")
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- paste(compSeq, "G", sep="")
}
}
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- paste(compSeq, "T", sep="")
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- paste(compSeq, "A", sep="")
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- paste(compSeq, "C", sep="")
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- paste(compSeq, "G", sep="")
}
}
DNAseq <- "GCACTAAAGCACCAGCGAGACTAGACAGTGCCTTACGCTGTATAGGGATAAAAGTTGTCAAGATGACTTGCGGGAATCGTTAGGCTGACACGCACTAATGCTCGCCTTCCGGGTGTTCTGTGAGTACGGTTGATCACGGTCGCCCTGCGGATGTACTACCATGAAAGTTGATCACGTGCCGCGCGCTCCCTAAGCTTAGAAGTTTGCACAATCTGCATTCTATCCTGCCACGCCTTCAATAATAAGTGGTGTATGCAATTTGGAGTCGATCTGGGAACCAACGATTAACTTGGGAAGTGGCTATATCAAAATACGATGTCTTCAGCGTCGCGGTCGACGCTGCGCAACGAACGAAAAGTCCGATGGACCCGAACTCTGATTATACCGAATCTCCGCTTTTACGACTCGCCACATACCGGCATAAGCCATTCTGGGGCTTTGCCCCCTTAGGTCTAGCCCACCCCCGACCTAGCTTGAGCGTGTCACACCCCAACAGCCGCATTACGCCCGCTCACCGACACTTGGCGGTCGTATAAGAAATCCAAAACCGAGACGAAAACTGAAGAATAAGGTTCATTCAGCATTGTGGAGTTGACAACATCAGTATGAGGGTGAGTTGCGTCAAAGTCGAAGAATATGGAGGGTCAAATCACGAGATGTAACATCCACGCGAACACTTAGCTAGTAATCATTTTTCCGTAAAGAGTCGTTGAGTCCGACCAGTTGAAGCTCAGTGTTTATCCGGTAGGGAATTGTAGGATCAACGATAGGGTCGCGGAACCGCCGTATTATAGAAAGAGATAGTCCCAACGTTCTTTATGCACTTCGCTGAGAGAGGGTGACCGGGCACGCAGAGACTTTGGCTTTGTAGCCCCATTCCGCGGCTCTTCGGATACTGACTGAGCTGTAGTCGGCACATCCTTTACAACAAAAAAGCTCATGTCCGAGATTTTAATGGCGGCGCACGGTCACTCGGAGTTGACGAATGCGCAGCGAATCGTTGGTTCCAGATAAAGGCAAGGCTGTGTTACTGTTTCGGAGGGCAATCGTCAACGAGCAAAGATGTTAGAATAGAAATCGGAGCGAGGCTCCCAGCAAATATGAGTTAGGATCTTTTTTGCGAAAGGGTTGGTCTCCATCTCCTCTCGCCTGCGAGCGAGTCCCCGAAGCACGTTCAACCTATTTGATTCGGTGCAGGACACCCTAGATTAGCATACAGGTATAATATCAGGAAGAGTCACCTTTCATTCCCGACCAGTAGGATGTATAGGAATGAGACTATCCAGTTCTTTGTCAGCTCAAGACAGCGTTGGCAATACGGCCGAGTATTGGGGGGAATACCCCGGAACATAGTATTGTGCCTTAGCTATTGCCCTAGATACCACGCGGCCCTTGAGCATTTGTCTACACTTTGGTGATCCTAGGCACCCCGCGCTCGTGGCAACGTCAGCATCTTGTGATAGCAAAGCGTATGTACCTGTAATGTAACATCAAAGTATATCGGCACCCTAGTGGGGGCGAAGGTTGGATCGCTTATCACTCGGGACGACGGTGGTATCCAGCCACAGTGTTGCTCATTAACGACCACACAGCTCTTGGAATCGAGCCATGGACAGGGGACGCCCCAGGATACATGATGTTCCTGTGAGCACAAGCACTATGGCAGGCTTAGAGCTAATTCTTCCATTGGGCCGGTAAGACGCCAGAGAAAGTCACCGGTGTGAGAAAGGGTTTCGTGTGGGGGAGGCGTCAAACAACAAGGATTTACGTCGAACCGATCAGCCCTTGTCTGATTCATTCCAGGTTTAAGCGAGCCCTGGCGGTGACCTCCCGGGGATTCTTGGTGACGATAAGTGTAGACTGGTTTATGACTGTCTATAAGTGCAAGCAGTCCGCGACTCGGCCGCTCCTCAGATCTCGTCCTCCCAATCCTTACGAGGCACTATTCCGGCCCTAAAAACTTACCTACCAACCGGACATAGCGAACGGTCTAAGTTTTCGGAAATTGAATAACACTCGAACAAAGGAGCCCAATACATGGCACAAGCACACATAAAGCTTGGCGCTGCTGACGGCCGGCCCCCACAGCAGGTGGGTATATCAGGATAATGCTCTACCTCCTCGGGGATGACCAGAGACGAACGTTCGGACGCTATTAGTTAGTGGTCGCCCAGATATTCTCCTAATCAAGCCCTCGAAGGCTAGTCTAAATTTTAGCAAAAACTCGTATAGCAGCACATGCGGTAGACTGGGCCTCAGCCAGGTAGAGCTGTGGCTGCACTCGAGCAATCACTACCGTATAGAGTGGTGTTATTTCGGGGTGAATGTCAGGGGTGGTCCAAAATCACAAACACGTCTATTCGCACCCGGGAATGCTCATGTTCCCACGGCGGGCCTGTACAGATGTGAGAGGCAGCGATCATACAAAGTTGCCTGGCCTCCCCACGAACACACGGCGGCCCATTAGGTCTGAACAGGTTTATCGTTAATATATTTTGCGGTGG"
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- paste(compSeq, "T", sep="")
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- paste(compSeq, "A", sep="")
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- paste(compSeq, "C", sep="")
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- paste(compSeq, "G", sep="")
}
}
mydata <- readLines("dna1.txt")
DNAseq <- "GCACTAAAGCACCAGCGAGACTAG"
compSeq <- ""
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- paste(compSeq, "T", sep="")
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- paste(compSeq, "A", sep="")
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- paste(compSeq, "C", sep="")
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- paste(compSeq, "G", sep="")
}
}
DNAseq <- "GCACTAAAGCACCA"
compSeq <- ""
DNAseq <- mydata[2]
mydata <- readLines("dna1.txt")
DNAseq <- mydata[2]
compSeq <- ""
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- paste(compSeq, "T", sep="")
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- paste(compSeq, "A", sep="")
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- paste(compSeq, "C", sep="")
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- paste(compSeq, "G", sep="")
}
}
print(compSeq)
write(compSeq, file="data.txt")
mydata <- readLines("dataset_3_2.txt")
DNAseq <- mydata[2]
compSeq <- ""
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- paste(compSeq, "T", sep="")
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- paste(compSeq, "A", sep="")
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- paste(compSeq, "C", sep="")
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- paste(compSeq, "G", sep="")
}
}
write(compSeq, file="comp_3_2.txt")
mydata <- readLines("dataset_3_2.txt")
DNAseq <- mydata[1]
compSeq <- ""
for (i in nchar(DNAseq):1) {
if (substr(DNAseq, i, i) == "A") {
compSeq <- paste(compSeq, "T", sep="")
} else if (substr(DNAseq, i, i) == "T") {
compSeq <- paste(compSeq, "A", sep="")
} else if (substr(DNAseq, i, i) == "G") {
compSeq <- paste(compSeq, "C", sep="")
} else if (substr(DNAseq, i, i) == "C") {
compSeq <- paste(compSeq, "G", sep="")
}
}
write(compSeq, file="comp_3_2.txt")
patternCount <- function(text, pattern, start, position) {
count <- 0
if (missing(position)) {
position <- FALSE
}
if (missing(start)) {
start <- 1
}
##Loop that counts the how many times a pattern appears in
##a specific DNA string
for (i in start:nchar(text)-nchar(pattern)+1) {
if (substr(text, i, i+nchar(pattern)-1)==pattern) {
count <- count + 1
if (position == TRUE) {
print(i-1)
}
}
}
return(count)
}
setwd("C:/Users/Brandon/Desktop/Coursera Bioinformatics")
#Function to count the number of times a pattern appears
#in text
patternCount <- function(text, pattern, start, position) {
count <- 0
if (missing(position)) {
position <- FALSE
}
if (missing(start)) {
start <- 1
}
##Loop that counts the how many times a pattern appears in
##a specific DNA string
for (i in start:nchar(text)-nchar(pattern)+1) {
if (substr(text, i, i+nchar(pattern)-1)==pattern) {
count <- count + 1
if (position == TRUE) {
print(i-1)
}
}
}
return(count)
}
pattern <- "ATAT"
text <- "GATATATGCATATACTT"
patternCount(text, pattern, position=TRUE)
mydata <- readLines("dataset_3_5.txt")
pattern <- mydata[1]
text <- mydata[2]
patternCount(text, pattern, position=TRUE)
patternCount <- function(text, pattern, start, position) {
count <- 0
if (missing(position)) {
position <- FALSE
}
if (missing(start)) {
start <- 1
}
positions <- ""
##Loop that counts the how many times a pattern appears in
##a specific DNA string
for (i in start:nchar(text)-nchar(pattern)+1) {
if (substr(text, i, i+nchar(pattern)-1)==pattern) {
count <- count + 1
if (position == TRUE) {
positions <- paste(positions, toString(i))
}
}
}
return(count)
}
patternCount(text, pattern, position=TRUE)
mydata <- readLines("dataset_3_5.txt")
pattern <- mydata[1]
text <- mydata[2]
patternCount(text, pattern, position=TRUE)
##Set to proper working directory in Coursera Bioinformatics
setwd("C:/Users/Brandon/Desktop/Coursera Bioinformatics")
#Function to count the number of times a pattern appears
#in text
patternCount <- function(text, pattern, start, position) {
count <- 0
if (missing(position)) {
position <- FALSE
}
if (missing(start)) {
start <- 1
}
positions <- ""
##Loop that counts the how many times a pattern appears in
##a specific DNA string
for (i in start:nchar(text)-nchar(pattern)+1) {
if (substr(text, i, i+nchar(pattern)-1)==pattern) {
count <- count + 1
if (position == TRUE) {
positions <- paste(positions, toString(i))
print(i)
}
}
}
return(count)
}
mydata <- readLines("dataset_3_5.txt")
pattern <- mydata[1]
text <- mydata[2]
patternCount(text, pattern, position=TRUE)
##Set to proper working directory in Coursera Bioinformatics
setwd("C:/Users/Brandon/Desktop/Coursera Bioinformatics")
#Function to count the number of times a pattern appears
#in text
patternCount <- function(text, pattern, start, position) {
count <- 0
if (missing(position)) {
position <- FALSE
}
if (missing(start)) {
start <- 1
}
positions <- ""
##Loop that counts the how many times a pattern appears in
##a specific DNA string
for (i in start:nchar(text)-nchar(pattern)+1) {
if (substr(text, i, i+nchar(pattern)-1)==pattern) {
count <- count + 1
if (position == TRUE) {
positions <- paste(positions, toString(i))
print(i)
}
}
}
print(positions)
return(count)
}
mydata <- readLines("dataset_3_5.txt")
pattern <- mydata[1]
text <- mydata[2]
patternCount(text, pattern, position=TRUE)
##Set to proper working directory in Coursera Bioinformatics
setwd("C:/Users/Brandon/Desktop/Coursera Bioinformatics")
#Function to count the number of times a pattern appears
#in text
patternCount <- function(text, pattern, start, position) {
count <- 0
if (missing(position)) {
position <- FALSE
}
if (missing(start)) {
start <- 1
}
positions <- ""
##Loop that counts the how many times a pattern appears in
##a specific DNA string
for (i in start:nchar(text)-nchar(pattern)+1) {
if (substr(text, i, i+nchar(pattern)-1)==pattern) {
count <- count + 1
if (position == TRUE) {
positions <- paste(positions, toString(i))
print(i)
}
}
}
write(positions, "positions.txt")
return(count)
}
mydata <- readLines("dataset_3_5.txt")
pattern <- mydata[1]
text <- mydata[2]
patternCount(text, pattern, position=TRUE)
mydata <- readLines("vibrioDNA.txt")
text <- mydata[1]
##Set to proper working directory in Coursera Bioinformatics
setwd("C:/Users/Brandon/Desktop/Coursera Bioinformatics")
#Function to count the number of times a pattern appears
#in text
patternCount <- function(text, pattern, start, position) {
count <- 0
if (missing(position)) {
position <- FALSE
}
if (missing(start)) {
start <- 1
}
positions <- ""
##Loop that counts the how many times a pattern appears in
##a specific DNA string
for (i in start:nchar(text)-nchar(pattern)+1) {
if (substr(text, i, i+nchar(pattern)-1)==pattern) {
count <- count + 1
if (position == TRUE) {
positions <- paste(positions, toString(i))
print(i)
}
}
}
write(positions, "positions.txt")
return(count)
}
mydata <- readLines("vibrioDNA.txt")
pattern <- "CTTGATCAT"
text <- mydata[1]
patternCount(text, pattern, position=TRUE)
pattern <- "ATGATCAAG"
patternCount(text, pattern, position=TRUE)
pattern <- "CTTGATCAT"
patternCount(text, pattern, position=TRUE)
patternCount <- function(text, pattern, start, position) {
count <- 0
if (missing(position)) {
position <- FALSE
}
if (missing(start)) {
start <- 1
}
positions <- ""
##Loop that counts the how many times a pattern appears in
##a specific DNA string
for (i in start:nchar(text)-nchar(pattern)+1) {
if (substr(text, i, i+nchar(pattern)-1)==pattern) {
count <- count + 1
if (position == TRUE) {
positions <- paste(positions, toString(i-1))
}
}
}
write(positions, "positions.txt")
return(count)
}
patternCount(text, pattern, position=TRUE)
